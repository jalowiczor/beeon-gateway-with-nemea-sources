#pragma once

#include <Poco/SharedPtr.h>
#include <Poco/Timespan.h>

namespace BeeeOn {

/**
 * @brief Back-off policy for retrying an operation.
 */
class BackOff {
public:
	typedef Poco::SharedPtr<BackOff> Ptr;

	virtual ~BackOff();

	/**
	 * @return next timeout generated by the back-off algorithm.
	 */
	virtual Poco::Timespan next() = 0;

	/**
	 * Reset state of the back-off algorithm.
	 */
	virtual void reset() = 0;

	/**
	 * Constant returned when there will be no more back-off
	 * generated in this back-off instance unless reset is called.
	 */
	static const Poco::Timespan STOP;
};

/**
 * @brief Factory for creation of preconfigured BackOff instances.
 */
class BackOffFactory {
public:
	typedef Poco::SharedPtr<BackOffFactory> Ptr;

	virtual ~BackOffFactory();

	/**
	 * Create a new instance of the particular BackOff implementation.
	 */
	virtual BackOff::Ptr create() = 0;
};

}
